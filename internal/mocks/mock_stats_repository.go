// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/julietteengel/fizzbuzz-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIStatsRepository creates a new instance of MockIStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIStatsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIStatsRepository {
	mock := &MockIStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIStatsRepository is an autogenerated mock type for the IStatsRepository type
type MockIStatsRepository struct {
	mock.Mock
}

type MockIStatsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIStatsRepository) EXPECT() *MockIStatsRepository_Expecter {
	return &MockIStatsRepository_Expecter{mock: &_m.Mock}
}

// GetMostFrequent provides a mock function for the type MockIStatsRepository
func (_mock *MockIStatsRepository) GetMostFrequent(ctx context.Context) (*model.StatsResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMostFrequent")
	}

	var r0 *model.StatsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*model.StatsResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *model.StatsResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StatsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIStatsRepository_GetMostFrequent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMostFrequent'
type MockIStatsRepository_GetMostFrequent_Call struct {
	*mock.Call
}

// GetMostFrequent is a helper method to define mock.On call
//   - ctx
func (_e *MockIStatsRepository_Expecter) GetMostFrequent(ctx interface{}) *MockIStatsRepository_GetMostFrequent_Call {
	return &MockIStatsRepository_GetMostFrequent_Call{Call: _e.mock.On("GetMostFrequent", ctx)}
}

func (_c *MockIStatsRepository_GetMostFrequent_Call) Run(run func(ctx context.Context)) *MockIStatsRepository_GetMostFrequent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIStatsRepository_GetMostFrequent_Call) Return(statsResponse *model.StatsResponse, err error) *MockIStatsRepository_GetMostFrequent_Call {
	_c.Call.Return(statsResponse, err)
	return _c
}

func (_c *MockIStatsRepository_GetMostFrequent_Call) RunAndReturn(run func(ctx context.Context) (*model.StatsResponse, error)) *MockIStatsRepository_GetMostFrequent_Call {
	_c.Call.Return(run)
	return _c
}

// RecordRequest provides a mock function for the type MockIStatsRepository
func (_mock *MockIStatsRepository) RecordRequest(ctx context.Context, request model.FizzBuzzRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RecordRequest")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.FizzBuzzRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIStatsRepository_RecordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordRequest'
type MockIStatsRepository_RecordRequest_Call struct {
	*mock.Call
}

// RecordRequest is a helper method to define mock.On call
//   - ctx
//   - request
func (_e *MockIStatsRepository_Expecter) RecordRequest(ctx interface{}, request interface{}) *MockIStatsRepository_RecordRequest_Call {
	return &MockIStatsRepository_RecordRequest_Call{Call: _e.mock.On("RecordRequest", ctx, request)}
}

func (_c *MockIStatsRepository_RecordRequest_Call) Run(run func(ctx context.Context, request model.FizzBuzzRequest)) *MockIStatsRepository_RecordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.FizzBuzzRequest))
	})
	return _c
}

func (_c *MockIStatsRepository_RecordRequest_Call) Return(err error) *MockIStatsRepository_RecordRequest_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIStatsRepository_RecordRequest_Call) RunAndReturn(run func(ctx context.Context, request model.FizzBuzzRequest) error) *MockIStatsRepository_RecordRequest_Call {
	_c.Call.Return(run)
	return _c
}
